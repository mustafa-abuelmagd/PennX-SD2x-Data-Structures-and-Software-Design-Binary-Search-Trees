


public class BinarySearchTree<E extends Comparable<E>> {
	class Node {
		E value;
		Node leftChild = null;
		Node rightChild = null;
		Node(E value) {
			this.value = value;
		}
		@Override
		public boolean equals(Object obj) {
			if ((obj instanceof BinarySearchTree.Node) == false)
				return false;
			@SuppressWarnings("unchecked")
			Node other = (BinarySearchTree<E>.Node)obj;
			return other.value.compareTo(value) == 0 &&
					other.leftChild == leftChild && other.rightChild == rightChild;
		}
	}
	int count = 0;

	protected Node root = null;

	protected void visit(Node n) {
		System.out.println(n.value);
	}

	public boolean contains(E val) {
		return contains(root, val);
	}

	protected boolean contains(Node n, E val) {
		if (n == null) return false;

		if (n.value.equals(val)) {
			return true;
		} else if (n.value.compareTo(val) > 0) {
			return contains(n.leftChild, val);
		} else {
			return contains(n.rightChild, val);
		}
	}

	public boolean add(E val) {
		if (root == null) {
			root = new Node(val);
			return true;
		}
		return add(root, val);
	}

	protected boolean add(Node n, E val) {
		if (n == null) {
			return false;
		}
		int cmp = val.compareTo(n.value);
		if (cmp == 0) {
			return false; // this ensures that the same value does not appear more than once
		} else if (cmp < 0) {
			if (n.leftChild == null) {
				n.leftChild = new Node(val);
				return true;
			} else {
				return add(n.leftChild, val);
			} 	
		} else {
			if (n.rightChild == null) {
				n.rightChild = new Node(val);
				return true;
			} else {
				return add(n.rightChild, val);
			} 	
		}
	}	

	public boolean remove(E val) {
		return remove(root, null, val);
	}

	protected boolean remove(Node n, Node parent, E val) {
		if (n == null) return false;

		if (val.compareTo(n.value) == -1) {
			return remove(n.leftChild, n, val);
		} else if (val.compareTo(n.value) == 1) {
			return remove(n.rightChild, n, val);
		} else {
			if (n.leftChild != null && n.rightChild != null){
				n.value = maxValue(n.leftChild);
				remove(n.leftChild, n, n.value);
			} else if (parent == null) {
				root = n.leftChild != null ? n.leftChild : n.rightChild;
			} else if (parent.leftChild == n){
				parent.leftChild = n.leftChild != null ? n.leftChild : n.rightChild;
			} else {
				parent.rightChild = n.leftChild != null ? n.leftChild : n.rightChild;
			}
			return true;
		}
	}

	protected E maxValue(Node n) {
		if (n.rightChild == null) {
			return n.value;
		} else {
			return maxValue(n.rightChild);
		}
	}


	/*********************************************
	 * 
	 * IMPLEMENT THE METHODS BELOW!
	 *
	 *********************************************/


	// Method #1.
	public Node findNode(E val) {

		/* IMPLEMENT THIS METHOD! */
		return findNode( root, val);
	}

	public Node findNode(Node n,  E val) {
		if (val==null)return null;
		if(!(contains(val)))return null;
		if(n.value.equals(val))return n;

		if(val.compareTo(root.value)> 0) return findNode(n.rightChild, val);
		else  return findNode(n.leftChild, val);
	}

	// Method #2.
	protected int depth(E val) {

		/* IMPLEMENT THIS METHOD! */
		return depth(root, val);
	}

	protected int depth(Node n ,E val) {
		if(val==null || !contains(val))return -1;
		if(val.equals(n.value))return count;
		else if(val.compareTo(n.value)> 0) {
			count++;
			depth(n.rightChild, val);
		}
		else if(val.compareTo(n.value)< 0) {
			count++;
			depth(n.leftChild, val);		
		}
		return count;
	}




	// Method #3.
	protected int height(E val) {
		/* IMPLEMENT THIS METHOD! */
		if(val==null || !contains(val))return -1;
		int rcount=0;
		int lcount=0;
		Node n = findNode(val);
		while(n.rightChild!= null) {
			n=n.rightChild;
			rcount++;
		}
		n = findNode(val);
		while(n.leftChild!= null) {
			n=n.leftChild;
			lcount++;
		}
		if(rcount>= lcount)return rcount;
		else if(lcount > rcount)return lcount;
		else return  -2;

	}


	protected boolean isLeafNode(Node n) {
		if(n.rightChild==null && n.leftChild==null)return true;
		return false;
	}


	// Method #4.
	protected boolean isBalanced(Node n) {

		/* IMPLEMENT THIS METHOD! */

		if(n==null)return false;
		if(!contains(n.value))return false;
		if(height(n.value)==0)return true;

		E rval=n.rightChild.value;
		E lval=n.leftChild.value;
		int d = height(rval)-height(lval);

		if(Math.abs(d)<=1 )return true;

		return false; // this line is here only so this code will compile if you don't modify it

	}


	public boolean IsBalanced(Node n) {

		if(n==null)return true;
		//n = root;

		if(!(isBalanced(n)))return false;

		if(!(isBalanced(n.leftChild))||  !(isBalanced(n.rightChild)) )return false;

		
		boolean l=true;
		boolean r=true;

		if(n.leftChild!=null)  l=IsBalanced(n.leftChild);
		if(n.rightChild!=null)  r =IsBalanced(n.rightChild);

		return l&&r;}
		
		//return (n.rightChild!= null && IsBalanced(n.rightChild))  && (n.leftChild !=null && IsBalanced(n.leftChild));
		
		
		/*if(n==null)return true;

		if(height(n.value)>0) {
			if(isBalanced(n)) {

				boolean l=true;
				boolean r=true;

				if(n.leftChild!=null) l=IsBalanced(n.leftChild);
				if(n.rightChild!=null) r =IsBalanced(n.rightChild);

				return l&&r;}

			else return false;}
		else if (height(n.value)==0)return true;
		else return false;*/

	
		//return true;
	


	// Method #5. .
	public boolean isBalanced() {

		/* IMPLEMENT THIS METHOD! */
		

        if(isBalanced(root))
            return true;

        return false;
    
		//return IsBalanced(root ); // this line is here only so this code will compile if you don't modify it

	}

}
